
const { google } = require('googleapis');
class GoogleProcessor {
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  static keys = require('./Keys.json');
  static sid;
  static gid;
  static client = new google.auth.JWT(this.keys.client_email, null, this.keys.private_key, ['https://www.googleapis.com/auth/spreadsheets']);
  static gsapi = google.sheets({ version: 'v4', auth: this.client });

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static async init(SID, GID) {
    this.sid = SID;
    this.gid = GID;
    return new Promise((resolve, reject) => {
      this.client.authorize((error, tokens) => {
        if (error) {
          console.error('Authorization error:', error);
          reject(error);
        } else {
          console.log('Connected...');
          resolve(tokens);
        }
      });
    });
  }


  // ---------- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ------

  // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –ø–æ gid
  static async getSheetNameByGid() {
    try {
      const response = await this.gsapi.spreadsheets.get({
        spreadsheetId: this.sid,
      });

      const sheets = response.data.sheets;
      const sheet = sheets.find(s => s.properties.sheetId.toString() === this.gid.toString());

      if (!sheet) {
        throw new Error(`Sheet with gid ${this.gid} not found`);
      }

      return sheet.properties.title;
    } catch (error) {
      console.error('Error getting sheet name by gid:', error);
      throw error;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –≥–¥–µ –≤ —Å—Ç–æ–ª–±—Ü–µ 'A' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  static async deleteRowsByColumnValue(columnValue) {
    try {
      let sheetName = await this.getSheetNameByGid();
      // –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ 'A'
      const range = `${sheetName}!A:A`;
      let values = await this.readRange(range);

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å columnValue
      const rowsToDelete = [];
      for (let i = 0; i < values.length; i++) {
        if (values[i][0] === columnValue) {
          rowsToDelete.push(i + 1); // –°—Ç—Ä–æ–∫–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 1
        }
      }

      if (rowsToDelete.length === 0) {
        console.log('No rows found with the specified value.');
        return;
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
      for (const row of rowsToDelete.reverse()) {
        await this.deleteRow(row);
        console.log(`Deleted row ${row}`);
      }

    } catch (error) {
      console.error('Error deleting rows:', error);
      // throw error;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  static async deleteRow(row) {
    try {
      const batchUpdateRequest = {
        spreadsheetId: this.sid,
        resource: {
          requests: [
            {
              deleteDimension: {
                range: {
                  sheetId: this.gid,
                  dimension: 'ROWS',
                  startIndex: row - 1,
                  endIndex: row
                }
              }
            }
          ]
        }
      };

      await this.gsapi.spreadsheets.batchUpdate(batchUpdateRequest);
    } catch (error) {
      console.error('Error deleting row:', error);
      throw error;
    }
  }

 
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
  static async findFirstEmptyRow() {
    try {
      let sheetName = await this.getSheetNameByGid();
      // –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
      const range = `${sheetName}`; // –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
      const values = await this.readRange(range);

      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      let rowNumber = values.length + 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏

      // –ü—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é
      for (let i = 0; i < values.length; i++) {
        if (values[i].every(cell => cell === undefined || cell === '')) {
          rowNumber = i + 1; // –°—Ç—Ä–æ–∫–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 1
          break;
        }
      }

      return rowNumber;
    } catch (error) {
      console.error('Error finding the first empty row:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ª–∏—Å—Ç–∞
  static async getHeadersRow(rowNumber) {
    try {
      let sheetName = await this.getSheetNameByGid();
      // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
      const range = `${sheetName}!${rowNumber}:${rowNumber}`; // –ó–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      const values = await this.readRange(range);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (values.length === 0) {
        console.log('No headers found.');
        return [];
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = values[0]; // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      return headers;
    } catch (error) {
      console.error('Error getting headers:', error);
      return null;
    }
  }


  // –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ –ê –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è 
  static async findRowInFirstColumn(currentDivision) {
    let sheetName = await this.getSheetNameByGid();
    let divisionColumnLetter = 'A';
    let values = await this.readRange(`${sheetName}!${divisionColumnLetter}:${divisionColumnLetter}`);
    values = values.map(el => el[0]);
    // console.log(values);
    // let currentDivision = '–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã';
    let rowNumber = values.findIndex(el => el === currentDivision) + 1; // –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–µ –∏—Å–∫–æ–º–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    // console.log(rowNumber);
    return rowNumber;
  }
  // –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è –º–µ—Å—è—Ü —Ñ–æ—Ä–º–∞—Ç–∞ "2024-08" –∏ –≤—ã–¥–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
  static async columnNumberInRow(rowNumber, foundingValue) {
    try {
      let sheetName = await this.getSheetNameByGid();
      let values = await this.readRange(`${sheetName}!${rowNumber}:${rowNumber}`);
      values = values[0]; // —Ç–∞–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –¥–≤—É–º–µ—Ä–Ω—ã–π
  
      let colIndex = values.findIndex(el => el === foundingValue);
  
      if (colIndex === -1) {
        return null; // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      }
  
      return colIndex + 1;
    } catch (error) {
      return null;
    }
  }

  static async columnNumbersBySearchValuesInRow(rowNumber, searchValues = []) {
    try {
      if (!Array.isArray(searchValues) || searchValues.length === 0) return [];
  
      const sheetName = await this.getSheetNameByGid();
      const values = await this.readRange(`${sheetName}!${rowNumber}:${rowNumber}`);
      const row = values[0]; // –ø–µ—Ä–≤–∞—è (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è) —Å—Ç—Ä–æ–∫–∞
  
      const result = [];
  
      for (const value of searchValues) {
        const colIndex = row.findIndex(cell => cell === value);
        if (colIndex !== -1) {
          result.push({ value, columnNumber: colIndex + 1 });
        }
      }
  
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º:', error);
      return [];
    }
  }
  
  

  static async getCellValue(cellAddress) {
    const options = {
      spreadsheetId: this.sid,
      range: cellAddress,
    };
  
    try {
      const resp = await this.gsapi.spreadsheets.values.get(options);
      const value = resp.data.values?.[0]?.[0] ?? null;
      return value;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ${cellAddress}:`, error.message);
      return null;
    }
  }

  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ–¥-–º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2024-09
  static getCurrentYearMonth() {
    const date = new Date();
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –î–æ–±–∞–≤–ª—è–µ–º 1, —Ç.–∫. –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    return `${year}-${month}`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É —Å—Ç–æ–ª–±—Ü–∞
  static getColumnLetter(columnNumber) {
    let letter = '';
    let temp = columnNumber;

    while (temp > 0) {
      let mod = (temp - 1) % 26;
      letter = String.fromCharCode(65 + mod) + letter;
      temp = Math.floor((temp - mod) / 26);
    }
    return letter;
  }

  // –ß–¢–ï–ù–ò–ï
  static async readRange(range) {
    const opt = {
      spreadsheetId: this.sid,
      range: range
    };
    let dataObtained = await this.gsapi.spreadsheets.values.get(opt);
    return dataObtained.data.values;
  }

// –ó–ê–ü–ò–°–¨
static async writeRange(range, values) {
  try {
    const updateOptions = {
      spreadsheetId: this.sid,
      range: range,
      valueInputOption: 'USER_ENTERED',
      resource: { values: values }
    };
    const resp = await this.gsapi.spreadsheets.values.update(updateOptions);
    return resp;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:', error.message);
    return null;
  }
}


  // 
  static async writeCell(cellAdress, value) {
    const updateOptions = {
      spreadsheetId: this.sid,
      range: cellAdress,
      valueInputOption: 'USER_ENTERED',
      resource: { values: [[value]] }
    };
    try {
      const resp = await this.gsapi.spreadsheets.values.update(updateOptions);
      if (resp.status === 200) {
        return true;
      } else {
        console.error('Unexpected response status:', resp.status);
        return false;
      }
    } catch (error) {
      console.error(`Failed to write to cell ${cellAdress}: ${value}`, error.message);
      return false;
    }
  }
  

  static async getSheetsList() {
    try {
      const response = await this.gsapi.spreadsheets.get({
        spreadsheetId: this.sid,
      });

      const sheets = response.data.sheets;
      const sheetNames = sheets.map(sheet => sheet.properties.title);

      console.log('Sheet names:', sheetNames);
      return sheetNames;
    } catch (error) {
      console.error('Error getting sheet names:', error);
    }
  }


}



module.exports = GoogleProcessor;
